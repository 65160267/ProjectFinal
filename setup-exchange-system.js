const { pool } = require('./db');
const fs = require('fs');
const path = require('path');

async function setupExchangeSystem() {
  try {
    console.log('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠...');
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå SQL
    const sqlPath = path.join(__dirname, 'db', 'exchange_system_complete.sql');
    const sqlContent = fs.readFileSync(sqlPath, 'utf8');
    
    // ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    const statements = sqlContent
      .split(/;[\s]*(?=\n|$)/) // ‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ ; ‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ newline ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏ö
      .map(stmt => stmt.trim())
      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--') && !stmt.startsWith('/*'));
    
    console.log(`üìù ‡∏û‡∏ö ${statements.length} ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL`);
    
    // ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i];
      if (statement.toLowerCase().includes('delimiter')) {
        console.log(`‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° DELIMITER command (${i + 1})`);
        continue;
      }
      
      console.log(`‚ñ∂Ô∏è ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${i + 1}: ${statement.substring(0, 50).replace(/\n/g, ' ')}...`);
      
      try {
        await pool.query(statement);
        console.log(`   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      } catch (error) {
        if (error.message.includes('already exists') || 
            error.message.includes('Duplicate column') ||
            error.message.includes('Multiple primary key')) {
          console.log(`   ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° (‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß): ${error.message.split('\n')[0]}`);
        } else {
          console.log(`   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message.split('\n')[0]}`);
        }
      }
    }
    
    console.log('\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
    const [tables] = await pool.query("SHOW TABLES LIKE '%exchange%'");
    console.log('üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö exchange:', 
      tables.map(t => Object.values(t)[0]).join(', '));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Views
    const [views] = await pool.query("SHOW FULL TABLES WHERE Table_type = 'VIEW' AND Tables_in_db LIKE '%exchange%'");
    console.log('üëÅÔ∏è Views ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:', 
      views.map(v => v.Tables_in_db).join(', '));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    try {
      const [count] = await pool.query("SELECT COUNT(*) as count FROM exchange_requests");
      console.log('üîÑ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:', count[0].count);
    } catch (e) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô:', e.message);
    }
    
    console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('üìö ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß');
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á:', error);
  }
  
  process.exit(0);
}

setupExchangeSystem();